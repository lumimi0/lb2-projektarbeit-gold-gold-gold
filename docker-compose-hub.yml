version: '3.8'

services:
  database:
    image: postgres:15-alpine
    container_name: csgo-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - csgo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    image: ${DOCKER_HUB_USERNAME}/csgo-backend:${BACKEND_IMAGE_TAG}
    container_name: csgo-backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRES_HOST}:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
    ports:
      - "${BACKEND_PORT}:8080"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - csgo-network
    restart: unless-stopped

  frontend:
    image: ${DOCKER_HUB_USERNAME}/csgo-frontend:${FRONTEND_IMAGE_TAG}
    container_name: csgo-frontend
    ports:
      - "${FRONTEND_PORT}:80"
    depends_on:
      - backend
    networks:
      - csgo-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  csgo-network:
    driver: bridge